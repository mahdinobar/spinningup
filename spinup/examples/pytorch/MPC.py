import pybullet as p
import pybullet_data
import numpy as np
import casadi as ca
import matplotlib.pyplot as plt
import time

# === Sim and Robot Setup ===
p.connect(p.DIRECT)
p.setAdditionalSearchPath(pybullet_data.getDataPath())
p.setGravity(0, 0, -9.81)
plane = p.loadURDF("plane.urdf")
robot = p.loadURDF(
    "/home/mahdi/ETHZ/codes/spinningup/spinup/examples/pytorch/URDFs/fep3/panda_corrected_Nosc.urdf",
    useFixedBase=True
)

controlled_joints = [0, 1, 2, 3, 4, 5, 6]
nq = len(controlled_joints)
ee_link_index = 9  # end effector link ID in PyBullet
dt = 0.1
horizon = 10
lambda_reg = 1e-2
p.setTimeStep(timeStep=dt)
p.setGravity(0, 0, -9.81)
p.setAdditionalSearchPath(pybullet_data.getDataPath())


# === Target Trajectory ===
def target_position(k):
    xd=np.hstack((np.array([0.5345, 0.5344939357891602, 0.5344901346485453, 0.5344901346485453, 0.5343963579477218, 0.5343646375211054, 0.5342895879075513, 0.5343452376368083, 0.5344243704191343, 0.5344192024176413, 0.5345391466444619, 0.5345391466444619, 0.5347815092446625, 0.5345257629310186, 0.5344510704547156, 0.5345576118050208, 0.5348213998313508, 0.5347363030784332, 0.5346982983142494, 0.5346982983142494, 0.5346378540831987, 0.534757464362962, 0.5347210054124796, 0.5346462801764889, 0.5344816149670542, 0.5344816149670542, 0.5345189920381677, 0.5346979329054151, 0.5346979329054151, 0.5346501136958179, 0.53455589960014, 0.5346068966694663, 0.5346136923041187, 0.5345932839630526, 0.5347024107231986, 0.5347059012409345, 0.5348754766435448, 0.5348754766435448, 0.5349281753880097, 0.5349222485333186, 0.5346690852595033, 0.5347038922197592, 0.5347622128467099, 0.5347622128467099, 0.5348281778244854, 0.5347739609165831, 0.5347739609165831, 0.5348460474341753, 0.5348460474341753, 0.5346387657472155, 0.5344224413429634, 0.5342044441647327, 0.5341364047737988, 0.5344146418545292, 0.5344146418545292, 0.5343946341083557, 0.5342678924859467, 0.5343797307113376, 0.5342671787227831, 0.5342671787227831, 0.5344044335951043, 0.5344894270786381, 0.5346070786847711, 0.5346017179480606, 0.5346017179480606, 0.5347589055655553, 0.5347666412116584, 0.53488766377076, 0.5346372994407605, 0.5346372994407605, 0.5348784463630171, 0.5347506782526762, 0.5346837126173885, 0.5345743988583834, 0.5345581672947541, 0.534569557615284, 0.534569557615284, 0.5346287536765773, 0.534732680134649, 0.534732680134649, 0.5344179989474314, 0.5344179989474314, 0.5342039675555093, 0.5342039675555093, 0.534347145699097, 0.5343207066979201, 0.5343518711374473, 0.5343518711374473, 0.5342270111994972, 0.5343135537260854, 0.5344144724642693, 0.5344144724642693, 0.5345998357091853, 0.5345998357091853, 0.5344399656992403, 0.5344039782292892, 0.5344039782292892, 0.5343975808704159, 0.5344559015881065, 0.5343504424431841, 0.5343504424431841, 0.5346002663633542, 0.5346659912842701, 0.5345700281546623, 0.5345700281546623, 0.5345688888621567, 0.534496849148197, 0.534496849148197, 0.5344567560019755, 0.5344791404921178, 0.5346238450922521, 0.5346238450922521, 0.5346364428714208, 0.5345321148493648, 0.5346170910062725, 0.5346170910062725, 0.5347635043213083, 0.5348403393050153, 0.5348403393050153, 0.5345560197564867, 0.5345560197564867, 0.5343894033342526, 0.534507811669365, 0.5346584187394633, 0.5346584187394633, 0.5345448308999992, 0.534489203796087, 0.5345015209041815, 0.5346013137264573, 0.5345895735745856, 0.5345962888136871, 0.5345806556470769, 0.5344486135231272, 0.5344667029099915, 0.5344667029099915, 0.5344524674002364]),0.5344524674002364*np.ones(10)))
    yd = np.hstack((np.array([-0.2455, -0.24201928407314416, -0.23853898369804952, -0.23504921218616917, -0.23154559364503777, -0.22802491425206628, -0.2245789689725352, -0.22093900726569796, -0.21754473665244642, -0.21411334257281994, -0.21068979061961593, -0.20720001910773558, -0.20358980236423715, -0.20009930978567803, -0.19667731811440078, -0.19312373117780096, -0.18969833189816238, -0.1860832003899793, -0.1825599393280985, -0.17907016781621815, -0.1754167019379463, -0.17201468378485152, -0.16804686220999318, -0.16448403549509308, -0.1610186594919945, -0.15752888798011416, -0.15415897140816137, -0.15084090051718974, -0.1473511290053094, -0.1439921673989228, -0.14046689889290248, -0.1371144615156601, -0.13353191266220868, -0.13002337044800302, -0.1263461039950338, -0.1229098214217766, -0.11923833389797188, -0.11574856238609153, -0.11220218949450321, -0.10853956052989897, -0.10524708451271303, -0.10179519690314341, -0.09820339059263825, -0.0947136190807579, -0.09160869059616789, -0.0889296483546361, -0.08543987684275575, -0.08236926324857652, -0.07887949173669617, -0.07512815014878227, -0.0717005842896997, -0.06813133121201129, -0.06462102626680291, -0.06114434915257457, -0.057654577640694225, -0.054178656024462965, -0.05058275705671089, -0.047085159736508134, -0.04340495486866288, -0.039915183356782534, -0.036452626743768084, -0.03279859301744572, -0.02953032879806441, -0.025997948700793194, -0.0225081771889125, -0.019043614254726844, -0.015627995138310896, -0.012253186044717077, -0.008650181340403133, -0.005160409828522505, -0.002031670573020417, 0.0015526311120703598, 0.005019881493264188, 0.008674831358618136, 0.011757620098746408, 0.015392995124886996, 0.01888276663676769, 0.022462868104478333, 0.025913317232739447, 0.02940308874462014, 0.03302368002667235, 0.0365134515385527, 0.0405019824178728, 0.043991753929753144, 0.0479043579180431, 0.05123201506749476, 0.05452295889987355, 0.05801273041175389, 0.061672528010497045, 0.06486303823907995, 0.06827248422494939, 0.07176225573682973, 0.07535277186951346, 0.0788425433813938, 0.08231631722831799, 0.08560396450761934, 0.08909373601949969, 0.0922298281546519, 0.0960919190281366, 0.09950167447629722, 0.10299144598817757, 0.10659084283506715, 0.11006677587427591, 0.1132015270946398, 0.11669129860652015, 0.1203862262075431, 0.12431857283305717, 0.1278083443449375, 0.13104466313197172, 0.1345609196694337, 0.13838358823974353, 0.14187335975162388, 0.14529919465163263, 0.14836975132248142, 0.15171191344702162, 0.15520168495890196, 0.15880059072343425, 0.16247795065790357, 0.16596772216978392, 0.17021544177769352, 0.17370521328957386, 0.17716888716123155, 0.17982407417632468, 0.1831749434157207, 0.18666471492760103, 0.1903924469315622, 0.19395400270710444, 0.1970404354339141, 0.20050687274072476, 0.20433628759201755, 0.2077636418307207, 0.21111926940345252, 0.21504519018292687, 0.21844416686802473, 0.22193393837990508, 0.22549897585556136]),0.22549897585556136*np.ones(10)))
    zd = np.hstack((np.array([0.1392, 0.13960281877618397, 0.13955392791617519, 0.13955392791617519, 0.13922663055607717, 0.13958461843514278, 0.13924952010485125, 0.139570522084479, 0.1395315989824759, 0.13984996592133847, 0.13946105888988186, 0.13946105888988186, 0.13872749233589224, 0.13956631654544985, 0.13915307239737823, 0.1393200363013312, 0.13893844738879874, 0.1394867875944786, 0.13912168278280776, 0.13912168278280776, 0.13966973745613645, 0.13910422736611383, 0.13948422656241274, 0.13900938594887977, 0.13953147114800327, 0.13953147114800327, 0.1389580960705198, 0.13938527234267498, 0.13938527234267498, 0.13902456759803475, 0.13897311827647968, 0.13904711458006133, 0.13884234209442642, 0.13945052793997287, 0.13922001028984787, 0.1391675152515423, 0.13934359491315737, 0.13934359491315737, 0.13980961758473684, 0.1395932078455196, 0.13909897592790635, 0.13944028107225173, 0.1391343783712135, 0.1391343783712135, 0.1398072353143656, 0.13903526902634183, 0.13903526902634183, 0.13861947429109217, 0.13861947429109217, 0.1392498865265811, 0.138978282645164, 0.1388533409471874, 0.13888625860028916, 0.13936970355444608, 0.13936970355444608, 0.13971321367650136, 0.13948438176184652, 0.13984132601027652, 0.13965468937420905, 0.13965468937420905, 0.13897366810720813, 0.13912625941947612, 0.13909619041161617, 0.13933195083293745, 0.13933195083293745, 0.13869935282338552, 0.13883951936681724, 0.13931340663208017, 0.13870908687158887, 0.13870908687158887, 0.139109901288994, 0.1386147842967306, 0.13911852109216516, 0.1389210736979855, 0.13908939141616755, 0.13924374881499912, 0.13924374881499912, 0.13902068295783662, 0.13900061461255203, 0.13900061461255203, 0.1397870247497138, 0.1397870247497138, 0.1392847629982706, 0.1392847629982706, 0.13882882472063612, 0.13936607774558438, 0.13889376114040639, 0.13889376114040639, 0.13933217690360558, 0.13958106941686416, 0.1397435085296174, 0.1397435085296174, 0.13922785659944265, 0.13922785659944265, 0.1397881297124167, 0.13950854845576746, 0.13950854845576746, 0.13908299838427196, 0.1393908708817892, 0.13969973375934666, 0.13969973375934666, 0.13982286383964984, 0.1390891028706875, 0.13930779371305255, 0.13930779371305255, 0.13912272918211113, 0.13940210704269657, 0.13940210704269657, 0.13911756632003924, 0.13859339440221008, 0.13906205121922832, 0.13906205121922832, 0.13863550854039514, 0.13943909978974595, 0.1385030228327635, 0.1385030228327635, 0.1385173080025731, 0.1395714604600013, 0.1395714604600013, 0.13890266954396066, 0.13890266954396066, 0.13909012402700438, 0.13944597423389643, 0.13875291268280304, 0.13875291268280304, 0.1390758410477741, 0.13952099840434, 0.1391813730935212, 0.1396839724107189, 0.13899474117371313, 0.13928712211267089, 0.13949770063448874, 0.13966020441884613, 0.13946059276167855, 0.13946059276167855, 0.13870210758609042]),0.13870210758609042*np.ones(10)))
    # return np.array([0.5 + 0.05 * t, 0.3 + 0.05 * t, 0.5])
    return np.array([xd[k],yd[k],zd[k]])

# === Forward Kinematics from PyBullet ===
def pb_forward_kinematics(q):
    for i, joint in enumerate(controlled_joints):
        p.resetJointState(robot, joint, q[i])
    state = p.getLinkState(robot, ee_link_index, computeForwardKinematics=True)
    return np.array(state[0])  # XYZ position

# === CasADi FK Wrapper Using PyBullet ===
def casadi_fk_pybullet():
    q_sym = ca.MX.sym('q', nq)
    fk_vals = []
    # Evaluate FK for each CasADi variable set via a CasADi "callback"
    def fk_callback(q_np):
        return np.array(pb_forward_kinematics(q_np)).reshape((3,))
    fk_func = ca.external('fk_func', fk_callback)
    # We wrap it in a CasADi function
    fk_casadi = ca.Function('fk', [q_sym], [fk_func(q_sym)])
    return fk_casadi

# fk_casadi = casadi_fk_pybullet()

def dh_transform(a, alpha, d, theta):
    return ca.vertcat(
        ca.horzcat(ca.cos(theta), -ca.sin(theta)*ca.cos(alpha),  ca.sin(theta)*ca.sin(alpha), a*ca.cos(theta)),
        ca.horzcat(ca.sin(theta),  ca.cos(theta)*ca.cos(alpha), -ca.cos(theta)*ca.sin(alpha), a*ca.sin(theta)),
        ca.horzcat(0,              ca.sin(alpha),                ca.cos(alpha),               d),
        ca.horzcat(0,              0,                            0,                           1)
    )
def casadi_fk_3d():
    q = ca.MX.sym('q', nq)

    # DH parameters from Panda URDF
    dh_params = [
        (0,        ca.pi/2, 0.333, q[0]),
        (0,       -ca.pi/2, 0.0,   q[1]),
        (0,        ca.pi/2, 0.316, q[2]),
        (0.0825,   ca.pi/2, 0.0,   q[3]),
        (-0.0825, -ca.pi/2, 0.384, q[4]),
        (0,        ca.pi/2, 0.0,   q[5]),
        (0.088,    ca.pi/2, 0.0,   q[6]),
        (0,        0.0,     0.107, 0)  # flange
    ]

    T = ca.MX.eye(4)
    for a, alpha, d, theta in dh_params:
        T = ca.mtimes(T, dh_transform(a, alpha, d, theta))

    ee_pos = T[:3, 3]
    return ca.Function('fk_3d', [q], [ee_pos])

fk_casadi = casadi_fk_3d()

# === MPC Solver in full 3D ===
def mpc_controller(q0, k0):
    opti = ca.Opti()
    Q = opti.variable(nq, horizon + 1)
    dQ = opti.variable(nq, horizon)
    opti.subject_to(Q[:, 0] == q0)

    cost = 0
    for k in range(horizon):
        qk = Q[:, k]
        dqk = dQ[:, k]
        target = target_position(k0 + k)
        # ee_pos = fk_casadi(qk)  # Now uses PyBullet FK model
        # cost += ca.sumsqr(ee_pos - target) + lambda_reg * ca.sumsqr(dqk)
        ee_pos = fk_casadi(qk)
        cost += ca.sumsqr(ee_pos - target) + lambda_reg * ca.sumsqr(dqk)
        opti.subject_to(Q[:, k + 1] == qk + dqk * dt)
        opti.subject_to(opti.bounded(-2.62, dqk, 2.62))

    opti.minimize(cost)
    opti.solver("ipopt")

    try:
        sol = opti.solve()
        return sol.value(dQ[:, 0])
    except RuntimeError as e:
        print(f"MPC failed at time {t0} due to error: {e}")
        return np.zeros(nq)

# === Logging ===
log_data = {"time": [], "q": [], "ee_pos": [], "target_pos": []}

# === Main Simulation Loop ===
q_real = np.array([-0.20, 0.40, -0.20, -2.05, -0.12, 2.41, 0.0])
q_real = np.array([-0.20040717459772067, 0.4015263130901932, -0.20536087173827033, -2.0534489870435384, -0.12694184090841293, 2.413510859720994, 0])
for k in range(136):
    print("k=",k)
    t_sim = k * dt
    dq_ref = mpc_controller(q_real, k)
    q_real += dq_ref * dt

    # Apply joint velocities
    p.setJointMotorControlArray(
        robot,
        controlled_joints,
        controlMode=p.VELOCITY_CONTROL,
        targetVelocities=list(dq_ref),
        velocityGains=[1]*nq,
        forces=[87, 87, 87, 87, 12, 12, 12]
    )
    p.stepSimulation()

    # Logging
    ee_pos = pb_forward_kinematics(q_real)
    target_pos = target_position(k)
    log_data["time"].append(t_sim)
    log_data["q"].append(q_real.copy())
    log_data["ee_pos"].append(ee_pos.copy())
    log_data["target_pos"].append(target_pos.copy())

    time.sleep(dt)

# === Convert to arrays ===
log_data["q"] = np.array(log_data["q"])
log_data["ee_pos"] = np.array(log_data["ee_pos"])
log_data["target_pos"] = np.array(log_data["target_pos"])

# === Absolute tracking errors ===
errors = np.abs(log_data["ee_pos"] - log_data["target_pos"])

# === Plot tracking errors ===
plt.figure(figsize=(10, 6))
labels = ["X error", "Y error", "Z error"]
for i in range(3):
    plt.plot(log_data["time"], errors[:, i] * 1000, label=f"{labels[i]} [mm]")
plt.xlabel("Time [s]")
plt.ylabel("Absolute Error [mm]")
plt.title("End-Effector Absolute Tracking Errors (MPC with PyBullet FK)")
plt.legend()
plt.grid(True)

# === XY Tracking plot ===
plt.figure(figsize=(8, 6))
plt.plot(log_data["target_pos"][:, 0], log_data["target_pos"][:, 1], 'r--', label="Target XY")
plt.plot(log_data["ee_pos"][:, 0], log_data["ee_pos"][:, 1], 'b-', label="EE XY")
plt.xlabel("X [m]")
plt.ylabel("Y [m]")
plt.title("End Effector vs Target Trajectory (XY)")
plt.legend()
plt.grid(True)

plt.show()

# print("")
